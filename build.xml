<project name="Women's Transatlantic Genre Fiction" default="all" basedir=".">

<target name="all" depends="figures,xml" description="* Do everything"/>


<target name="config">
  <echo message="Loading configuration settings from config file."/>
  <echo message="************************************************"/>

  <!-- import settings from config file -->
  <xmlproperty file="build-config.xml"/>

<!-- user-readable printout of settings loaded from config file -->

  <echo message="Using the following input directories:"/>
  <echo message="   images       : ${basedir}/${config.input.imagedir}"/>
  <echo message="   texts        : ${basedir}/${config.input.textdir}"/>
  <echo message="Using the following settings for figure processing:"/>
  <echo message="   pagesize     : ${config.figure.size.page}"/>
  <echo message="   thumbnail    : ${config.figure.size.thumbnail}"/>
  <echo message="Resulting xml files will be added to cvs with named tag ${config.cvs.tag}"/>
  <echo message="Using the following settings for loading &amp; deleting data on tamino:"/>
  <echo message="   server       : ${config.tamino.server}"/>
  <echo message="   database     : ${config.tamino.database}"/>
  <echo message="   collection   : ${config.tamino.collection}"/>
  <echo message="   root element : ${config.tamino.rootElement}"/>

  <echo message="Internal directories used by build:"/>
  <echo message="   image dir    : ${config.dir.images}"/>
  <echo message="   image thumbs : ${config.dir.images.thumbnails}"/>

<!-- check things out from cvs? julia's common framework, neh xml dir -->


<!-- set some properties according to whether directories have been created yet -->
  <available file="${config.dir}" type="dir" property="config.dir.exists"/>
  <available file="${config.dir.images}" type="dir" property="config.dir.images.exists"/>
  <available file="${config.dir.images.thumbnails}" type="dir" 
	property="config.dir.images.thumbnails.exists"/>
  <available file="${config.dir.xml}" type="dir" property="config.dir.xml.exists"/>
  <available file="${config.dir.xml.entities}" type="dir" property="config.dir.xml.entities.exists"/>
  <available file="${config.dir.xml.figures}" type="dir" property="config.dir.xml.figures.exists"/>
  <available file="${config.dir.cvs.xml}" type="dir" property="exists.dir.cvs.xml"/>




<!-- pattern sets for matching files -->
  <patternset id="tiffs">
    <include name="*.tif"/>
    <include name="*.tiff"/>
  </patternset>

  <patternset id="jpegs">
    <include name="*.jpg"/>
    <include name="*.jpeg"/>
  </patternset>


  <xmlcatalog id="tei">
    <dtd publicId="-//TEI//DTD TEI Lite XML ver. 1//EN" 
 	location="${config.dir.cvs.dtd}/${config.dtd}"/> 
    <entity publicId="figure-entities" location="${basedir}/${config.figure.entities}"/> 
  </xmlcatalog>


 
</target> <!-- end target config -->

<target name="cvs" depends="config">
<!-- check stuff out of cvs -->

  <delete dir="${config.dir.cvs}"/>
  <mkdir dir="${config.dir.cvs}"/>

  <!-- check out dataPrep directory of common framework on Julia's box -->
  <!-- using -d switch to put all files in cvs/dataPrep dir -->  
  <cvs command="checkout -kb -d ${config.dir.cvs.dataPrep}" 
       package="frameworkCommon/dataPrep"
       quiet="true"
       cvsRoot="${config.cvs.cvsroot.frameworkCommon}"
  />

  <!-- check out empty neh xml directory (for adding xml files generated by build) -->
  <cvs command="checkout"
       package="neh/data/xml/.build_file"
       dest="${config.dir.cvs}"
       quiet="true"
       cvsRoot="${config.cvs.cvsroot}"
  />


  <!-- check out customized dtd to validating against -->
<!--  <cvs command="checkout -kb -d ${config.dir.cvs.dtd}" -->
  <cvs command="checkout"
       package="neh/DTD/${config.dtd}"
       dest="${config.dir.cvs}"
       quiet="false"
       cvsRoot="${config.cvs.cvsroot}"
  />

</target>



<!-- create base work directory, unless it already exists -->
<target name="work-dir" unless="config.dir.exists">
  <mkdir dir="${config.dir}"/>
</target>


<target name="figures" depends="config,work-dir,figures-resize,figures-thumbs,figures-remaining" 
	description="* Convert images to jpeg format, resize, create thumbnails"/> 



<target name="figures-resize" depends="config,work-dir">
<!-- move tif images to working directory, convert & resize to page-image dimensions --> 

<!-- make sure image dir is empty -->
<delete dir="${config.dir.images}"/>
<mkdir dir="${config.dir.images}"/>

<!-- move tif images from input dir to working directory -->
<!--   <move todir="${config.dir.images}"> -->
  <copy todir="${config.dir.images}">
    <fileset  dir="${config.input.imagedir}">
     <patternset refid="tiffs"/>
    </fileset>
  </copy>
<!--   </move> -->

<!-- use mogrify to resize and convert to jpg -->
 <echo message="Running mogrify to resize and convert to jpeg in ${config.dir.images}."/>
 <echo message="   mogrify -format jpg -resize ${config.figure.size.page}"/>
 <apply executable="mogrify" parallel="true" failonerror="true" skipemptyfilesets="true" 
	dir="${config.dir.images}">
   <arg line="-format jpg -resize ${config.figure.size.page}"/>
   <fileset dir="${config.dir.images}">
     <patternset refid="tiffs"/>
   </fileset>
 </apply>

<!-- delete tiff files (no longer needed) -->
  <delete>
    <fileset dir="${config.dir.images}">
      <patternset refid="tiffs"/>
    </fileset>
  </delete>

</target>  <!-- end target figures-resize -->


<target name="figures-thumbs" depends="config" if="config.dir.images.exists">

<!-- make sure thumbnail dir is empty before using it -->
<delete dir="${config.dir.images.thumbnails}"/>
<mkdir dir="${config.dir.images.thumbnails}"/>

<!-- copy resized jpeg images to thumbnail directory -->
  <copy todir="${config.dir.images.thumbnails}">
    <fileset dir="${config.dir.images}">
     <patternset refid="jpegs"/>
    </fileset>
  </copy>

<!-- use mogrify to create thumbnails -->
 <echo message="Running mogrify to generate thumbnails in ${config.dir.images.thumbnails}."/>
 <echo message="   mogrify -format jpg -resize ${config.figure.size.thumbnail}"/>
 <apply executable="mogrify" parallel="true" failonerror="true" skipemptyfilesets="true" 
	dir="${config.dir.images.thumbnails}" >
   <arg line="-format jpg -resize ${config.figure.size.thumbnail}"/>
   <fileset dir="${config.dir.images.thumbnails}">
     <patternset refid="jpegs"/>
   </fileset>
 </apply>

</target>  <!-- end target figures-thumbs -->


<target name="figures-remaining" depends="config,work-dir">
<!-- Move remaining input figures to working directory. 
     These are figures that do not need resizing or thumbnails. 
-->
<!--   <move todir="${config.dir.images}"> -->
  <copy todir="${config.dir.images}">
    <fileset dir="${config.input.imagedir}">
      <include name="*"/>
    </fileset>
  </copy>
<!--   </move> -->
</target>



<target name="xml" depends="xml-input,xml-entities,xml-figures,xml-parse"
	description="* Convert entities to unicode, add figure dimensions, and parse xml" />


<target name="xml-input" depends="config,work-dir">
  <!-- make sure xml dir is empty before using it -->
  <delete dir="${config.dir.xml}"/>
  <mkdir dir="${config.dir.xml}"/>

<!-- move input text files to working directory, rename as xml files -->
<!--   <move todir="${config.dir.xml}"> -->
  <copy todir="${config.dir.xml}">
    <mapper type="glob" from="*.txt" to="*.xml"/>
    <fileset dir="${config.input.textdir}">
      <include name="*.txt"/>
    </fileset>
  </copy>
<!--   </move> -->

<!-- convert all line breaks from max or pc style to unix style -->
<!-- NOTE: there is an ant task fixclrf that could do this -->
  <apply executable="perl" parallel="false" dir="${config.dir.xml}" failonerror="true">
    <arg line="-pi -e 's/\r\n?/\n/g'"/>
    <fileset dir="${config.dir.xml}">
      <include name="*.xml"/>
    </fileset>
  </apply>
  
</target>


<target name="xml-entities" depends="config,xml-input,cvs" description="* Converts entities to unicode" >

  <echo message="Converting entities to unicode."/>
  <echo message="**********************************************"/>

  <delete dir="${config.dir.xml.entities}"/>
  <mkdir dir="${config.dir.xml.entities}"/>

  <exec executable="perl" dir="${config.dir.cvs.dataPrep}" failonerror="true">
   <arg line="convertEntities2Unicode_controller.pl -i ${basedir}/${config.dir.xml} -o ${basedir}/${config.dir.xml.entities} -norename"/>
  </exec>
	<!-- note: -norename option is to keep script from changing filename to *U.xml -->

</target> <!-- end unicode-entities -->


<target name="xml-figures" depends="config,xml-input,xml-entities,cvs"
	description="* Add figure dimensions to text">

 <echo message="Adding figure dimensions to xml files."/>
 <echo message="**********************************************"/>

 <delete dir="${config.dir.xml.figures}"/>
 <mkdir dir="${config.dir.xml.figures}"/>

<!-- add figure dimensions (width & height) to all figure elements in the texts -->
  <exec executable="perl" dir="${config.dir.cvs.dataPrep}" failonerror="true">
   <arg line="figure_dimensions.pl --inputdir ${basedir}/${config.dir.xml.entities} --outputdir ${basedir}/${config.dir.xml.figures} --imagedir ${basedir}/${config.dir.images}"/>
  </exec>

</target>


<target name="xml-parse" depends="config" 
 	description="* Parse xml files after modification.">

 <echo message="Parsing xml files."/>
 <echo message="**********************************************"/>

<delete dir="${config.dir.xml.doctype}"/>
<mkdir dir="${config.dir.xml.doctype}"/>

  

<!-- generate a list of figure entities for parsing -->
  <exec executable="perl" dir="${config.dir.cvs.dataPrep}" failonerror="true">
   <arg line="figure_entities.pl --inputdir ${basedir}/${config.dir.xml.entities} --imagedir ${basedir}/${config.dir.images} ${basedir}/${config.figure.entities}"/>
  </exec>

<!-- copy most recently updated version (figures was last step) -->
  <copy todir="${config.dir.xml.doctype}">
     <fileset dir="${config.dir.xml.figures}" includes="*.xml"/>
  </copy>


 <property name="doctype" value="${config.dir.xml.doctype}/doctype"/>

<!-- output doctype to a file so we can insert in the xml files -->
<concat destfile="${doctype}" append="no"><![CDATA[<!DOCTYPE TEI.2 PUBLIC 
	"-//TEI//DTD TEI Lite XML ver. 1//EN" 
	"${basedir}/{config.dir.cvs.dtd}/${config.dtd}" [
        <!NOTATION JPEG PUBLIC 'ISO DIS 10918//NOTATION JPEG Graphics Format//EN'>
 	<!ENTITY % neh SYSTEM "/home/rsutton/neh-build/docs/entity_list" >
         %neh; ] >]]></concat>

<apply executable="tcsh" parallel="false" failonerror="true">
 <arg line="${config.dir.cvs.dataPrep}/insert_header.sh ${doctype}"/>
  <fileset dir="${config.dir.xml.doctype}">
    <include name="*.xml"/>
  </fileset>
 </apply>

  <xmlvalidate  lenient="false" failonerror="true" warn="true">
    <fileset dir="${config.dir.xml.doctype}" includes="*.xml"/>
    <xmlcatalog refid="tei"/>
  </xmlvalidate>

<!-- If we get this far, it worked. --> 
<echo message="Successfully parsed all xml files."/>

<!-- copy files to final dir -->
  <mkdir dir="${config.dir.xml.final}"/>
  <copy todir="${config.dir.xml.final}">
    <!-- don't want the doctype / processing instruction; this is the same files without pi  --> 
     <fileset dir="${config.dir.xml.figures}" includes="*.xml"/>
  </copy>

</target> <!-- end xml-parse -->



<target name="load" depends="tamino-load,cvs-load"/>
<!-- fill in this target to accomplish the following:
     load xml to tamino (optional)
     add xml file to cvs, with label (optional)
     copy images to server where they will be hosted  (optional)
-->

<!-- prompt user whether or not to load data on tamino 
     (don't just do without asking) -->
<target name="ask-load" depends="config" if="xmldir.present">
<input
    message="Would you like to load files to tamino?"
    validargs="y,n"
    addproperty="response"
  />
<condition property="do.load">
<equals casesensitive="false" arg1="y" arg2="${response}"/>
</condition>
</target>  <!-- ask-load -->

<!-- do the actual load; only happens if do.load is true -->
<target name="tamino-load" depends="ask-load" if="do.load">

 <echo message="Loading files to tamino."/>
 <echo message="**********************************************"/>

  <exec executable="perl" failonerror="true">
     <env key="CLASSPATH" value="${classpath}"/>
     <arg line="${config.dir.cvs.dataprep}/tamino-load.pl -d ${config.tamino.database} -c ${config.tamino.collection} -r ${config.tamino.rootElement} --input-dir ${config.dir.xml.final}"/>
  </exec>

</target>  <!-- tamino-load -->


<target name="ask-cvs" depends="config" if="exists.dir.cvs.xml">
  <input
    message="Would you like to add the xml files to cvs? "
    validargs="y,n"
    addproperty="response"
  />
  <condition property="do.cvs">
    <equals casesensitive="false" arg1="y" arg2="${response}"/>
  </condition>
</target>  <!-- ask-cvs -->


<target name="cvs-load" depends="config,ask-cvs" if="do.cvs">

 <echo message="Loading newly created files to cvs."/>
 <echo message="**********************************************"/>

  <!-- copy final version of xml files to cvs xml directory -->
  <copy todir="${config.dir.cvs.xml}">
     <fileset dir="${config.dir.xml.final}" includes="*.xml"/>
  </copy>
  
  <!-- add files to cvs -->
  <echo message="Adding files to cvs."/>
  <exec executable="tcsh" failonerror="true">
     <arg line="${config.dir.cvs.dataPrep}/cvs_add.sh ${config.dir.cvs.xml} .xml"/>
  </exec>

  <!-- commit files -->
  <echo message="Committing files in cvs."/>
  <cvs command="commit -m 'automated commit by neh-build'"
       package="${config.dir.cvs.xml}"
       quiet="true"
       cvsRoot="${config.cvs.cvsroot}"
       />

  <!-- tag cvs files with build label -->
  <echo message="Tagging files in cvs with label ${config.cvs.tag}."/>
  <cvs command="tag ${config.cvs.tag}"
       package="${config.dir.cvs.xml}"
       quiet="true"
       cvsRoot="${config.cvs.cvsroot}"
       />

</target>   <!-- cvs-load -->

<target name="ask-imgload" depends="config" if="config.dir.xml.figures.exists">
  <input
    message="Would you like to copy the image files to the webserver? "
    validargs="y,n"
    addproperty="response"
  />
  <condition property="do.imgload">
    <equals casesensitive="false" arg1="y" arg2="${response}"/>
  </condition>
</target>  <!-- ask-imgload -->



<target name="image-load" depends="config,ask-imgload" if="do.imgload">

  <exec executable="scp" failonerror="true">
     <arg line="${config.dir.images}/estestbm337.jpg chaucer:/data/neh/data/images/"/>
  </exec>

</target>

</project>
